#!/bin/bash

# Define names of sites
SITE=
SITE1="gkena"
SITE2="gkeus"

# Define name of target-https-proxy
TARGET_PROXY=stza-external-lb-target-proxy

# Timeout to apply proxy changes
TARGET_PROXY_TIMEOUT=300

# Define url-map for target-https-proxy
# Possible values:
# stza-external-lb-mntc
# stza-external-lb-north
# stza-external-lb-central
URL_MAP=
URL_MAP1="stza-external-lb-north"
URL_MAP2="stza-external-lb-central"
URL_MAP_MNTC="stza-external-lb-mntc"

# Define dry-run mode
DRY_RUN=false

# DR operation
OPERATION=

# Define sm-client configuration file
SM_CONFIG_FILE="./config.yaml"

# Define sm-client verbose mode
SM_VERBOSE=

# Define sm-client services to be running
SM_RUN_SERVICES=

# Define sm-client services to be skipped
SM_SKIP_SERVICES=

COMMON_HELP_MSG="
Usage:

sm-pipeline [-h][-d][-v][-c config.yaml][--run-services svc1,svc2][--skip-services svc1,svc2] --operation <DR-PROCEDURE> --site <NAME-OF-SITE>

-h, --help                             show this help
-d, --dry-run                          start script in dry-run mode
-v, --verbose                          start script in verbose mode
-c, --config <PATH-TO-CONFIG>          the path to sm-client config file

--run-services <LIST-OF-SERVICES>      the list of services to apply DR action, by default all services participate
--skip-services <LIST-OF-SERVICES>     the list of services what will not participate in DR action
--operation <DR-PROCEDURE>             DR procedure
--site <NAME-OF-SITE>                  name of site for DR procedure
"

# set options and read arguments
options=("$@")
index=0
for argument in "${options[@]}"; do
    (( index=index+1 ))
    case $argument in
    # example for new options
    #-a) echo "key $argument value ${options[index]}" ;;
    -h | --help)
        echo "${COMMON_HELP_MSG}"
        exit 0
        ;;
    -v | --verbose)
        SM_VERBOSE="-v"
        ;;
    -d | --dry-run)
        DRY_RUN=true
        ;;
    -c | --config)
        SM_CONFIG_FILE="${options[index]}"
        ;;
    --run-services)
        SM_RUN_SERVICES="--run-services ${options[index]}"
        ;;
    --skip-services)
        SM_SKIP_SERVICES="--skip-services ${options[index]}"
        ;;
    --operation)
        OPERATION="${options[index]}"
        ;;
    --site)
        SITE="${options[index]}"
        ;;
    -*)
        echo "Wrong Option $argument"
        echo "${COMMON_HELP_MSG}"
        exit 1
        ;;
    esac
done

if [ "${OPERATION}" == "" ] || ! [[ "${OPERATION}" =~ ^(move|stop|return|mntc|active|standby|list|status)$ ]]; then

    echo "You should define valid DR operation from list: move, stop, return, mntc, active, standby, list, status"
    echo "and argument --operation"
    exit 1

fi

if [ "${SITE}" == "" ] || ! [[ "${SITE}" =~ ^"${SITE1}"|"${SITE2}"$ ]] && ! [[ "${OPERATION}" =~ ^(list|status)$ ]]; then

    echo "You should define valid site name by argument --site"
    exit 1

fi

if [ "${SM_CONFIG_FILE}" == "" ] || [ ! -f "${SM_CONFIG_FILE}" ]; then

    echo "You should define valid config file for sm-client by argument -c or --config"
    exit 1

fi

if [ "${SM_RUN_SERVICES}" != "" ] && [ "${SM_SKIP_SERVICES}" != "" ]; then

    echo "You should define only one option: --run-services or --skip-services. Not both"
    exit 1

fi

######################### RESOLVE SITE DEPENDENCIES ############################

if [[ "${OPERATION}"  =~ ^(stop|return|standby|mntc)$ ]]; then
    if [ "${SITE}" == "${SITE1}" ]; then
        URL_MAP=${URL_MAP2}
    fi

    if [ "${SITE}" == "${SITE2}" ]; then
        URL_MAP=${URL_MAP1}
    fi
fi

if [[ "${OPERATION}"  =~ ^(move|active)$ ]]; then
    if [ "${SITE}" == "${SITE1}" ]; then
        URL_MAP=${URL_MAP1}
    fi

    if [ "${SITE}" == "${SITE2}" ]; then
        URL_MAP=${URL_MAP2}
    fi
fi

################################ MAIN DR STEPS #################################

# 1 - Switch external LB to maintenance mode
if ${DRY_RUN} && ! [[ "${OPERATION}"  =~ ^(list|status)$ ]]; then

    echo "Switch target-https-proxy ${TARGET_PROXY} to maintenance mode"
    echo gcloud compute target-https-proxies update ${TARGET_PROXY} --url-map=${URL_MAP_MNTC}
    echo

elif ! [[ "${OPERATION}"  =~ ^(list|status)$ ]]; then

    echo "Switch target-https-proxy ${TARGET_PROXY} to maintenance mode"
    gcloud compute target-https-proxies update ${TARGET_PROXY} --url-map=${URL_MAP_MNTC}

    if [ $? -ne 0 ]; then
        echo "Failed switching target-https-proxy ${TARGET_PROXY} to maintenance mode"
        exit 1
    fi

    echo "Wait for ${TARGET_PROXY_TIMEOUT} seconds"
    sleep ${TARGET_PROXY_TIMEOUT}

fi

# 2 - Run sm-client to perform DR procedure
if ${DRY_RUN}; then

    echo "Run sm-client with procedure ${OPERATION}"
    echo ./sm-client ${SM_VERBOSE} -k -c ${SM_CONFIG_FILE} ${SM_RUN_SERVICES} ${SM_SKIP_SERVICES} ${OPERATION} ${SITE}
    echo

else

    echo "Run sm-client with procedure ${OPERATION}"
    ./sm-client ${SM_VERBOSE} -k -c ${SM_CONFIG_FILE} ${SM_RUN_SERVICES} ${SM_SKIP_SERVICES} ${OPERATION} ${SITE}

    echo "Wait for 10 seconds"
    sleep 10

fi

# 3 - Switch external LB from maintenance mode

if ${DRY_RUN} && ! [[ "${OPERATION}"  =~ ^(list|status)$ ]]; then

    echo "Switch target-https-proxy ${TARGET_PROXY} to url-map ${URL_MAP}"
    echo gcloud compute target-https-proxies update ${TARGET_PROXY} --url-map=${URL_MAP}
    echo

elif ! [[ "${OPERATION}"  =~ ^(list|status)$ ]]; then

    echo "Switch target-https-proxy ${TARGET_PROXY} to url-map ${URL_MAP}"
    gcloud compute target-https-proxies update ${TARGET_PROXY} --url-map=${URL_MAP}

    if [ $? -ne 0 ]; then
        echo "Failed switching target-https-proxy ${TARGET_PROXY} to url-map ${URL_MAP}"
        exit 1
    fi

    echo "Wait for ${TARGET_PROXY_TIMEOUT} seconds"
    sleep ${TARGET_PROXY_TIMEOUT}

fi
