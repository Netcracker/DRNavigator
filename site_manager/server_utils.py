#!/usr/bin/env python3
import logging
from common import utils


def get_all_services(sm_dict):
    """
    Method for definition of list of all services in kubernetes cluster managed by site-manager

    :param dict sm_dict: the dictionary generated by get_sitemanagers_dict() and based on CRs from kubernetes clusters
    """

    return list(set([ i for i in sm_dict["services"].keys() ]))


def get_services_to_run(run_services, skip_services, all_services):
    """
    Method for definition of list of services to be processed

    :param list run_services: the list of services that defined by parameter run-services
    :param list skip_services: the list of services that defined by parameter skip-services
    :param list all_services: the list of all services from kubernetes clusters managed by site-manager
    """

    if len(run_services) != 0:
        services_to_run = []
        for item in run_services:
            if item in all_services:
                services_to_run.append(item)
            else:
                logging.fatal(f"Service {item} does not exist in provided kubernetes clusters")
                exit(1)

    elif len(skip_services) != 0:
        services_to_run = all_services.copy()
        for item in skip_services:
            if item in all_services:
                services_to_run.remove(item)
            else:
                logging.fatal(f"Service {item} does not exist in provided kubernetes clusters")
                exit(1)

    else:
        services_to_run = all_services.copy()

    return services_to_run


def get_status(service, *args, **kwargs):
    """
    Method that collects complete information about the state of the service
    @param dict service: service's CR
    """

    output = dict()
    _, status, _ = utils.io_make_http_json_request(service['parameters']["serviceEndpoint"], token=utils.SM_AUTH_TOKEN)
    output["mode"] = status.get("mode", "--")
    output["status"] = status.get("status", "--")
    output["message"] = status.get("message", "")
    if service['parameters'].get("healthzEndpoint", "") != "":
        _, healthz, _ = utils.io_make_http_json_request(service['parameters']["healthzEndpoint"], token=utils.SM_AUTH_TOKEN)
        output["healthz"] = healthz.get("status", "--")
    else:
        output["healthz"] = "--"

    return output


def get_status_with_deps(service, sm_dict, *args, **kwargs):
    """
    Method that collects complete information about the state of the service with dependencies if needed
    @param str service: name of needed service
    @param dict sm_dict: services' CRs
    """
    output = {}
    with_deps = kwargs.get('with_deps', False)

    def collect_services(services, parent_service=None):
        for service_name in services:
            if service_name not in sm_dict['services']:
                logging.error(f"Found not exist dependency: {service_name} in {parent_service} CR")
                raise utils.ProcedureException(output={
                    "message": "Dependency defined in CR doesn't exist",
                    "wrong-service": service_name,
                    "problem-cr": parent_service
            })
            if service_name not in output:
                cr = sm_dict['services'][service_name]
                output[service_name] = get_status(cr, args, kwargs)
                if with_deps:
                    output[service_name]['deps'] = {
                        'before': cr['before'],
                        'after': cr['after']
                    }
                    collect_services(cr['before'], service_name)
                    collect_services(cr['after'], service_name)

    collect_services([service])
    return output
