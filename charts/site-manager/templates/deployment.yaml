---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: site-manager
  replicas: 1
  template:
    metadata:
      labels:
        app: site-manager
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        {{- with .Values.containerSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        image: {{ printf "%s:%s" .Values.image.repository .Values.image.tag }}
        args:
          - "--bind=0.0.0.0:8443"
          - "--config=site_manager/flank_exporter_config.py"
          - '--worker-class=gevent'
          - "--certfile=/certs/tls.crt"
          - "--keyfile=/certs/tls.key"
          - "-w {{ .Values.workerCount}}"
          - "site-manager:app"
        env:
          - name: FRONT_HTTP_AUTH
            value: "{{ .Values.env.FRONT_HTTP_AUTH }}"
          - name: BACK_HTTP_AUTH
            value: "{{ .Values.env.BACK_HTTP_AUTH }}"
          - name: SM_DEBUG
            value: "{{ .Values.env.SM_DEBUG }}"
          - name: SM_GROUP
            value: "{{ .Values.env.SM_GROUP }}"
          - name: SM_PLURAL
            value: "{{ .Values.env.SM_PLURAL }}"
          - name: SM_VERSION
            value: "{{ .Values.env.SM_VERSION }}"
          - name: HTTP_SCHEME
            value: "{{ .Values.env.HTTP_SCHEME }}"
          - name: SM_CACERT
            value: "{{ .Values.env.SM_CACERT }}"
          - name: SM_GET_REQUEST_TIMEOUT
            value: "{{ .Values.env.SM_GET_REQUEST_TIMEOUT }}"
          - name: SM_POST_REQUEST_TIMEOUT
            value: "{{ .Values.env.SM_POST_REQUEST_TIMEOUT }}"
        ports:
          - containerPort: 8443
            protocol: TCP
        volumeMounts:
          - readOnly: true
            mountPath: /certs
            name: sm-certs
          - name: metric-volume
            mountPath: /metric_dir/
        resources:
          limits:
              cpu: "{{ .Values.limits.cpu }}"
              memory: "{{ .Values.limits.memory }}"
        readinessProbe:
          httpGet:
            path: /health
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 2
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 8443
            scheme: HTTPS
          timeoutSeconds: 2
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 5
        terminationMessagePath: /dev/termination-log
        imagePullPolicy: {{ .Values.image.pullPolicy }}
      volumes:
        - name: sm-certs
          secret:
            secretName: sm-certs
        - name: metric-volume
          emptyDir: {}
