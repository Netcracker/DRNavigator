---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: site-manager
  replicas: 1
  template:
    metadata:
      labels:
        app: site-manager
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . | quote }}
      {{- end }}
      automountServiceAccountToken: false
      {{ include  "securityContext" . }}
      containers:
      - name: {{ .Chart.Name }}
        {{- with .Values.containerSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        image: {{ printf "%s:%s" .Values.image.repository .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
          - "--bind=0.0.0.0:8443"
          - "--certdir=/certs"
          - "--certfile=tls.crt"
          - "--keyfile=tls.key"
          - "--tokenfile=/sm-auth-sa/token"
          - "--bind-webhook=0.0.0.0:8442"
          - "--bind-metrics=0.0.0.0:9000"
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: HTTPS_ENABLED
            value: "{{ .Values.tls.enabled }}"
          - name: FRONT_HTTP_AUTH
            value: "{{ .Values.env.FRONT_HTTP_AUTH }}"
          - name: BACK_HTTP_AUTH
            value: "{{ .Values.env.BACK_HTTP_AUTH }}"
          - name: SM_DEBUG
            value: "{{ .Values.env.SM_DEBUG }}"
          - name: SM_GROUP
            value: "{{ .Values.env.SM_GROUP }}"
          - name: SM_KIND
            value: "{{ .Values.env.SM_KIND }}"
          - name: SM_KIND_LIST
            value: "{{ .Values.env.SM_KIND_LIST }}"
          - name: HTTP_SCHEME
            value: "{{ .Values.env.HTTP_SCHEME }}"
          - name: SM_CACERT
            value: "{{ .Values.env.SM_CACERT }}"
          - name: SM_GET_REQUEST_TIMEOUT
            value: "{{ .Values.env.SM_GET_REQUEST_TIMEOUT }}"
          - name: SM_POST_REQUEST_TIMEOUT
            value: "{{ .Values.env.SM_POST_REQUEST_TIMEOUT }}"
        ports:
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8442
            protocol: TCP
        volumeMounts:
          - readOnly: true
            mountPath: /certs
            name: sm-certs
          - readOnly: true
            mountPath: /sm-auth-sa
            name: sm-auth-sa-token
          - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
            name: serviceaccount-token
            readOnly: true
        resources:
          limits:
            cpu: "{{ .Values.limits.cpu }}"
            memory: "{{ .Values.limits.memory }}"
          requests:
            cpu: "{{ .Values.requests.cpu }}"
            memory: "{{ .Values.requests.memory }}"
        readinessProbe:
          httpGet:
            path: /health
            port: 8443
            scheme: {{ ternary "HTTPS" "HTTP" .Values.tls.enabled }}
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 2
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 8443
            scheme: {{ ternary "HTTPS" "HTTP" .Values.tls.enabled }}
          timeoutSeconds: 2
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 5
        terminationMessagePath: /dev/termination-log
        imagePullPolicy: {{ .Values.image.pullPolicy }}
      volumes:
        - name: sm-certs
          secret:
            secretName: sm-certs
        - name: sm-auth-sa-token
          secret:
            secretName: sm-auth-sa-token
        - name: serviceaccount-token
          projected:
            defaultMode: 0444
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                name: kube-root-ca.crt
                items:
                - key: ca.crt
                  path: ca.crt
            - downwardAPI:
                items:
                - path: namespace
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
