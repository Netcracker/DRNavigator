name: Tests
on:
  push:
    branches:
      - '**'

jobs:
  unittests:
    runs-on: ubuntu-latest
    if: false
    strategy:
      matrix:
        python-version: [ "3.9" ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get python version
        run: python --version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-sc-test.txt -r requirements-sc.txt
      - name: Run tests
        id: unittests
        run: python -m pytest tests/selftest
      - name: Collect artifacts
        if: failure() && steps.unittests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: unittest-logs
          path: pytest.log
          retention-days: 7

  integration-tests:
    runs-on: ubuntu-latest
    if: false
    strategy:
      matrix:
        python-version: [ "3.9" ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get python version
        run: python --version
      - name: Get Docker-compose version
        run: docker-compose version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-sc-test.txt -r requirements-sc.txt
      - name: Run tests
        id: integrationtests
        run: python -m pytest tests/integration
      - name: Collect artifacts
        if: failure() && steps.integrationtests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: integration-tests-logs
          path: test-dump/
          retention-days: 7

  cloud-tests:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Ssh preparation
        run: |
          ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa -q
          cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
          ssh-keyscan -H 172.17.0.1 >> ~/.ssh/known_hosts
          cp ~/.ssh/id_rsa ./ci/id_rsa
      - name: Remove moby-runc to resolve conflicts
        run: sudo apt remove moby-runc
      - name: Install kubemarine
        run: pip3 install kubemarine
      - name: Kubemarine install
        run: kubemarine -h
      #- name: Kubemarine install
     #  run: |
      #    docker run --name kubemarine-install \
      #    --mount type=bind,source="$(pwd)"/ci/id_rsa,target=/secrets/id_rsa \
      #    --mount type=bind,source="$(pwd)"/ci/cluster.yaml,target=/data/cluster.yaml \
      #    ghcr.io/netcracker/kubemarine:main install -c /data/cluster.yaml --disable-cumulative-points
      #- name: Load dump files from containers
       # if: failure()
      #  run: |
      #    mkdir -p results/kubemarine
      #    docker cp kubemarine-check:/opt/kubemarine/dump ./results/kubemarine/check_connectivity_dump
     #     docker cp kubemarine-install:/opt/kubemarine/dump ./results/kubemarine/install_dump
      - name: Collect artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: kubemarine dumps
          path: ./results/kubemarine/
          retention-days: 7
