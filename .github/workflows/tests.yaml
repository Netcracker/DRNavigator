name: Tests
on:
  push:
    branches:
      - '**'
    tags:
      - '*'

env:
  SM_TAG_NAME: ${{ github.sha }}

jobs:

  unittest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9" ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get python version
        run: python --version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-sc-test.txt -r requirements-sc.txt
      - name: Run tests
        id: unittests
        run: python -m pytest tests/selftest
      - name: Collect artifacts
        if: failure() && steps.unittests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: unittest-logs
          path: pytest.log
          retention-days: 7

  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9" ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get python version
        run: python --version
      - name: Get Docker-compose version
        run: docker-compose version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-sc-test.txt -r requirements-sc.txt
      - name: Run tests
        id: integrationtests
        run: python -m pytest tests/integration
      - name: Collect artifacts
        if: failure() && steps.integrationtests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: integration-tests-logs
          path: test-dump/
          retention-days: 7

  publish-test-sm-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: docker build -t ghcr.io/netcracker/site-manager:${{ env.SM_TAG_NAME }} -f Dockerfile-sm .
      - run: echo ${{secrets.GITHUB_TOKEN}} | docker login https://ghcr.io -u ${GITHUB_ACTOR} --password-stdin
      - run: docker push ghcr.io/netcracker/site-manager:${{ env.SM_TAG_NAME }}

  publish-test-sm-dummy-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: docker build -t ghcr.io/netcracker/sm-dummy:${{ env.SM_TAG_NAME }} -f tests/sm-dummy/Dockerfile .
      - run: echo ${{secrets.GITHUB_TOKEN}} | docker login https://ghcr.io -u ${GITHUB_ACTOR} --password-stdin
      - run: docker push ghcr.io/netcracker/sm-dummy:${{ env.SM_TAG_NAME }}

  publish-test-sm-cr-controller-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: docker build -t ghcr.io/netcracker/site-manager-cr-controller:${{ env.SM_TAG_NAME }} -f site-manager-cr-controller/Dockerfile site-manager-cr-controller
      - run: echo ${{secrets.GITHUB_TOKEN}} | docker login https://ghcr.io -u ${GITHUB_ACTOR} --password-stdin
      - run: docker push ghcr.io/netcracker/site-manager-cr-controller:${{ env.SM_TAG_NAME }}

  cloud-tests:
    needs: [publish-test-sm-image, publish-test-sm-dummy-image, publish-test-sm-cr-controller-image]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Ssh preparation
        run: |
          ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa -q
          cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
          ssh-keyscan -H 172.17.0.1 >> ~/.ssh/known_hosts
          mkdir results
      - name: Remove moby-runc to resolve conflicts
        run: sudo apt remove moby-runc
      - name: Install kubemarine & yq package
        run: pip3 install kubemarine yq
        # TODO: change to kubemarine runtime values feature
      - name: Generate certs
        run: |
          sudo openssl req -days 730 -nodes -new -x509 -keyout ./ca.key -out  ./ca.crt -subj "/CN=SM service"
          sudo openssl genrsa -out ./site-manager-tls.key 2048
          sudo openssl req -new -key  ./site-manager-tls.key -subj "/CN=site-manager.site-manager.svc" -config  ./ci/server.conf | \
          sudo openssl x509 -req -days 730 -CA  ./ca.crt -CAkey ./ca.key -CAcreateserial -out ./site-manager-tls.crt -extensions v3_req -extfile  ./ci/server.conf
          sudo chmod 644 site-manager-tls.key
      - name: Add runtime values to cluster.yaml
        run: |
          sed -i "s/<REGISTRY_USER>/${GITHUB_ACTOR}/; s/<REGISTRY_PASSWORD>/${{secrets.GITHUB_TOKEN}}/; s/<SM_TAG>/${{ env.SM_TAG_NAME }}/" ci/cluster.yaml
          python3 -m yq -i -y ' .plugins."site-manager".installation.procedures[1].helm.values.tls.ca |= "'"$(< ca.crt)"'"' ci/cluster.yaml
          python3 -m yq -i -y ' .plugins."site-manager".installation.procedures[1].helm.values.tls.crt |= "'"$(< site-manager-tls.crt)"'"' ci/cluster.yaml
          python3 -m yq -i -y ' .plugins."site-manager".installation.procedures[1].helm.values.tls.key |= "'"$(< site-manager-tls.key)"'"' ci/cluster.yaml
        # TODO Change to --dump-location ./results/kubemarine/ after secure runtime values implementation
      - name: Run kubemarine install with site-manager and sm-dummy
        run: kubemarine install -c ./ci/cluster.yaml --disable-cumulative-points --disable-dump
      - name: Install dependencies
        run: |
          pip3 install -r requirements-sc-test.txt -r requirements-sc.txt
      - name: Run tests on cluster
        run: python3 -m pytest tests/cloud_test --kubeconfig='./kubeconfig'

      - name: Get SM logs from pod
        if: failure()
        run: sudo kubectl logs -n site-manager -l app=site-manager -c site-manager > ./results/logs/sm.log
      - name: Get SM-cr-controller logs from pod
        if: failure()
        run: sudo kubectl logs -n site-manager -l app=site-manager -c site-manager-cr-controller > ./results/logs/sm-cr-controller.log
      - name: Get service-a from pod
        if: failure()
        run: sudo kubectl logs -n test-services -l app=service-a > ./results/logs/service-a.log
      - name: Get service-b from pod
        if: failure()
        run: sudo kubectl logs -n test-services -l app=service-b > ./results/logs/service-b.log
      - name: Collect kubemarine artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: kubemarine dumps
          path: ./results/kubemarine/
          retention-days: 7
      - name: Collect SM artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: site-manager logs
          path: ./results/logs
          retention-days: 7

  remove-test-sm-image:
    needs: [cloud-tests]
    if: ${{ always() && needs.publish-test-sm-image.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Delete image site-manager
        uses: bots-house/ghcr-delete-image-action@v1.1.0
        with:
          owner: netcracker
          name: site-manager
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.SM_TAG_NAME }}

  remove-test-sm-cr-controller-image:
    needs: [cloud-tests]
    if: ${{ always() && needs.publish-test-sm-cr-controller-image.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Delete image site-manager-cr-controller
        uses: bots-house/ghcr-delete-image-action@v1.1.0
        with:
          owner: netcracker
          name: site-manager-cr-controller
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.SM_TAG_NAME }}

  remove-test-sm-dummy-image:
    needs: [cloud-tests]
    if: ${{ always() && needs.publish-test-sm-dummy-image.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Delete image sm-dummy
        uses: bots-house/ghcr-delete-image-action@v1.1.0
        with:
          owner: netcracker
          name: sm-dummy
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.SM_TAG_NAME }}
