// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "site-manager"
                ],
                "summary": "Root request to check SM availability",
                "responses": {
                    "200": {
                        "description": "Always return 'Under construction'",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "tags": [
                    "site-manager"
                ],
                "summary": "Health check",
                "responses": {
                    "204": {
                        "description": "site-manager health up"
                    }
                }
            }
        },
        "/sitemanager": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "site-manager"
                ],
                "summary": "Get the dict of CRs for all services managed by site-manager",
                "responses": {
                    "200": {
                        "description": "CRs dictionary"
                    },
                    "401": {
                        "description": "Unauthorized user"
                    },
                    "403": {
                        "description": "Invalid token"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "site-manager"
                ],
                "summary": "Process service",
                "parameters": [
                    {
                        "description": "SM Processing request",
                        "name": "sm-request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SMRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Procedure runs"
                    },
                    "400": {
                        "description": "Wrong data"
                    },
                    "401": {
                        "description": "Unauthorized user"
                    },
                    "403": {
                        "description": "Invalid token"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ProcedureType": {
            "type": "string",
            "enum": [
                "list",
                "status",
                "active",
                "standby",
                "disable"
            ],
            "x-enum-varnames": [
                "ProcedureList",
                "ProcedureStatus",
                "ProcedureActive",
                "ProcedureStandby",
                "ProcedureDisable"
            ]
        },
        "model.SMRequest": {
            "type": "object",
            "properties": {
                "no-wait": {
                    "type": "boolean"
                },
                "procedure": {
                    "$ref": "#/definitions/model.ProcedureType"
                },
                "run-service": {
                    "type": "string"
                },
                "with_deps": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "site-manager",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
